import fs from 'fs';
import path from 'path';

const filePath = path.join(process.cwd(), 'src', 'backend', 'data', 'tax_accumulated.json');

function cleanOldYearData(data) {
  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 2 ‡∏õ‡∏µ (‡∏£‡∏ß‡∏° 3 ‡∏õ‡∏µ)
  const currentYear = new Date().getFullYear();
  const years = Object.keys(data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ || {}).map(Number);
  
  // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 2 ‡∏õ‡∏µ (‡πÄ‡∏ä‡πà‡∏ô 2025, 2024, 2023)
  const validYears = years.filter(year => year >= currentYear - 2);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const newYearData = {};
  validYears.forEach(year => {
    if (data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ && data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ[year]) {
      newYearData[year] = data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ[year];
    }
  });
  
  data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ = newYearData;
  return data;
}

export default function handler(req, res) {
  if (req.method === 'GET') {
    const { year } = req.query;
    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    
    if (year) {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
      const yearData = data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ?.[year] || { ‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏∞‡∏™‡∏°: 0 };
      res.status(200).json({ [year]: yearData });
    } else {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      res.status(200).json(data);
    }
  } else if (req.method === 'POST') {
    const { year, ‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏∞‡∏™‡∏°, ‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô } = req.body;
    let data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ structure ‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ) {
      data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ = {};
    }
    
    if (year) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö object (‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏∞‡∏™‡∏° ‡πÄ‡∏õ‡πá‡∏ô object)
      if (typeof ‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏∞‡∏™‡∏° === 'object' && ‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏∞‡∏™‡∏° !== null) {
        data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ[year] = ‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏∞‡∏™‡∏°;
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï object
        if (!data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ[year]) {
          data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ[year] = {};
        }
        if (‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏∞‡∏™‡∏° !== undefined) {
          data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ[year].‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏∞‡∏™‡∏° = parseFloat(‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏∞‡∏™‡∏°) || 0;
        }
        if (‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô !== undefined) {
          data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ[year].‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô = ‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô;
        }
      }
    }
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏õ‡∏µ (‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    // data = cleanOldYearData(data);
    
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    res.status(201).json({ success: true });
  } else if (req.method === 'DELETE') {
    try {
      const { year } = req.body;
      console.log('üóëÔ∏è DELETE request received for year:', year);
      
      let data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ structure ‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ) {
        console.log('‚ùå No tax data structure found');
        data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ = {};
        res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏µ' });
        return;
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!year) {
        console.log('‚ùå No year specified');
        res.status(400).json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
        return;
      }
      
      if (!data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ[year]) {
        console.log(`‚ùå Year ${year} not found in data`);
        res.status(404).json({ success: false, message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏µ‡∏õ‡∏µ ${year}` });
        return;
      }
      
      // ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö (‡πÉ‡∏ô log)
      console.log(`üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏µ‡∏õ‡∏µ ${year}:`, data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ[year]);
      
      // ‡∏•‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å object
      delete data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ[year];
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const remainingYears = Object.keys(data.‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ);
      console.log(`üìä ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö: ${remainingYears.join(', ')}`);
      
      fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
      console.log('‚úÖ File written successfully');
      
      res.status(200).json({ 
        success: true, 
        message: `‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏µ‡∏õ‡∏µ ${year} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
        remainingYears: remainingYears
      });
    } catch (error) {
      console.error('‚ùå Error in DELETE handler:', error);
      res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
    }
  } else {
    res.status(405).end();
  }
}